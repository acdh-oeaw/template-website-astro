---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";

import ColorSchemeSwitcher from "@/components/color-scheme-switcher.astro";
import ContentLink from "@/components/content/link.astro";
import Link from "@/components/link.astro";
import { MobileNavigation } from "@/components/mobile-navigation";
import { NavigationMenu } from "@/components/navigation-menu";
import { defaultLocale, type Locale } from "@/config/i18n.config";
import { createI18n } from "@/lib/i18n";
import { createSingletonResource } from "@/lib/keystatic/resources";
import logoDark from "~/public/assets/images/acdh-ch-logo-dark.svg";
import logoLight from "~/public/assets/images/acdh-ch-logo-light.svg";

const locale = (Astro.currentLocale as Locale | undefined) ?? defaultLocale;
const { t } = await createI18n(locale);
const navigation = await createSingletonResource("navigation", locale).read();
---

<header class="border-b">
	<div class="container flex items-center justify-between gap-x-8 py-4">
		<Link class="shrink-0" href="/">
			<Image
				alt=""
				class="block h-6 w-auto dark:hidden"
				decoding="auto"
				fetchpriority="high"
				src={logoLight}
			/>
			<Image
				alt=""
				class="hidden h-6 w-auto dark:block"
				decoding="auto"
				fetchpriority="high"
				src={logoDark}
			/>
			<span class="sr-only">{t("WebsiteHeader.links.home")}</span>
		</Link>

		<div class="hidden lg:flex lg:items-center lg:gap-x-8">
			<nav>
				<ul class="flex flex-wrap items-center gap-x-8" role="list">
					{
						navigation.data.links.map((item) => {
							switch (item.discriminant) {
								case "link": {
									return (
										<li>
											<ContentLink link={item.value.link}>{item.value.label}</ContentLink>
										</li>
									);
								}

								case "menu": {
									return (
										<li>
											<NavigationMenu client:load label={item.value.label}>
												<Fragment slot="label">
													<span>{item.value.label}</span>
													<Icon class="group-open:rotate-180" name="lucide:chevron-down" />
												</Fragment>
												<ul class="grid" role="list">
													{item.value.items.map((item) => {
														switch (item.discriminant) {
															case "link": {
																return (
																	<li>
																		<ContentLink
																			class="flex px-4 py-1 hover:bg-fill-weak"
																			link={item.value.link}
																		>
																			{item.value.label}
																		</ContentLink>
																	</li>
																);
															}

															case "separator": {
																return <li aria-orientation="horizontal" role="separator" />;
															}
														}
													})}
												</ul>
											</NavigationMenu>
										</li>
									);
								}

								case "separator": {
									return <li aria-orientation="vertical" role="separator" />;
								}
							}
						})
					}
				</ul>
			</nav>
			<div class="flex items-center gap-x-8">
				<ColorSchemeSwitcher />
			</div>
		</div>

		<div class="block lg:hidden">
			<MobileNavigation client:load label={t("WebsiteHeader.mobile-nav-trigger")}>
				<Fragment slot="label">
					<Icon aria-hidden="true" class="size-6" name="lucide:menu" />
					<span class="sr-only">{t("WebsiteHeader.mobile-nav-trigger")}</span>
				</Fragment>
				<ul class="grid" role="list">
					{
						navigation.data.links.map((item) => {
							switch (item.discriminant) {
								case "link": {
									return (
										<li>
											<ContentLink
												class="flex px-4 py-1 hover:bg-fill-hover"
												link={item.value.link}
											>
												{item.value.label}
											</ContentLink>
										</li>
									);
								}

								case "menu": {
									return (
										<li>
											<details class="group">
												<summary class="flex cursor-pointer items-center gap-x-4 px-4 py-1 hover:bg-fill-hover">
													{item.value.label}
													<Icon class="group-open:rotate-180" name="lucide:chevron-down" />
												</summary>
												<ul class="grid" role="list">
													{item.value.items.map((item) => {
														switch (item.discriminant) {
															case "link": {
																return (
																	<li>
																		<ContentLink
																			class="flex px-4 py-1 hover:bg-fill-hover"
																			link={item.value.link}
																		>
																			{item.value.label}
																		</ContentLink>
																	</li>
																);
															}

															case "separator": {
																return <li aria-orientation="horizontal" role="separator" />;
															}
														}
													})}
												</ul>
											</details>
										</li>
									);
								}

								case "separator": {
									return <li aria-orientation="vertical" role="separator" />;
								}
							}
						})
					}
				</ul>
			</MobileNavigation>
		</div>
	</div>
</header>
